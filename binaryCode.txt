
.data
kjsdk: .byte 1
bbb: .half 2
array: .word 0:100
inp: .asciiz "Nhap n: "
maxstr: .asciiz"\nMax la: "
minstr: .asciiz "\nMin la: "
sumstr: .asciiz "\nSum la: "
index: .asciiz "\nNhap vao chi so i can in ra: "
indexout: .asciiz "\na[i] la: "

.text
li $v0, 4

La $a0, inp
syscall

li $v0, 5
syscall
MOVE $s0, $v0


la $s1, array
li $s2, 1
loopRead: slt $t0, $s0, $s2
bne $t0, $zero, endLoopRead
addi $s1, $s1, 4

li $v0, 5
syscall
sw $v0, 0($s1)

addi $s2, $s2, 1
j loopRead
endLoopRead:


la $s1, array
li $s2, 1
li $s5, 0
li $s6, -10000000
li $s7, 10000000
findLoop:
slt $t0, $s0, $s2
bne $t0, $zero, endFindLoop
addi $s1, $s1, 4
lw $t1, 0($s1) 


slt $t0, $s6, $t1
beq $t0, $zero, outMax
add $s6, $zero, $t1 
outMax:


slt $t0, $t1, $s7
beq $t0, $zero, outMin
add $s7, $zero, $t1
outMin:


add $s5, $s5, $t1

addi $s2, $s2, 1
j findLoop
endFindLoop:


li $v0, 4
la $a0, maxstr
syscall 
li $v0, 1
move $a0, $s6
syscall

li $v0, 4
la $a0, minstr
syscall 
li $v0, 1
move $a0, $s7
syscall

li $v0, 4
la $a0, sumstr
syscall 
li $v0, 1
move $a0, $s5
syscall

li $v0, 4
la $a0, index
syscall
li $v0, 5
syscall
move $t0, $v0
li $t1, 4
mult $t0, $t1
mflo $t0
la $s1, array
add $s1, $s1, $t0

li $v0, 4
la $a0, indexout
syscall
li $v0, 1
lw $a0, 0($s1)
syscall

